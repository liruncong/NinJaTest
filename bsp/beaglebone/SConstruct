import os
import sys
import rtconfig

if os.getenv('RTT_ROOT'):
    RTT_ROOT = os.getenv('RTT_ROOT')
else:
    RTT_ROOT = os.path.normpath(os.getcwd() + '/../..')

sys.path = sys.path + [os.path.join(RTT_ROOT, 'tools')]
from building import *

TARGET = 'rtthread-beaglebone.' + rtconfig.TARGET_EXT

#SetOption('experimental','ninja')
DefaultEnvironment(tools=[])
env = Environment(tools = ['mingw', 'textfile'],
    AS = rtconfig.AS, ASFLAGS = rtconfig.AFLAGS,
    CC = rtconfig.CC, CFLAGS = rtconfig.CFLAGS,
    CXX= rtconfig.CXX, CXXFLAGS = rtconfig.CFLAGS,
    AR = rtconfig.AR, ARFLAGS = '-rc',
    LINK = rtconfig.LINK, LINKFLAGS = rtconfig.LFLAGS)
env.PrependENVPath('PATH', rtconfig.EXEC_PATH)
env.Tool('ninja')

Export('RTT_ROOT')
Export('rtconfig')

def ExpandList(l, expandList = []):
    for x in l:
        if type(x) != list:
            expandList.append(x)
        else:
            ExpandList(x)
    return expandList

# prepare building environment
objs = ExpandList(PrepareBuilding(env, RTT_ROOT))


def echo_response_file(respone_list):
    return (f'@echo {respone_list[0]} > $TARGET & ' + 
        ' '.join(f'echo {item} >> $TARGET &' for item in respone_list[1:-1]) + 
        f' echo {respone_list[-1]} >> $TARGET')

compileIncPath = os.path.normpath(os.path.join(rtconfig.EXEC_PATH, "..", "include"))
cppPathStr = [
    "-I%s" % (os.path.join(compileIncPath, "libcxx").replace("\\", "/")),
    "-I%s" % (compileIncPath.replace("\\", "/")),
]
cppPathStr += ['-I' + path.replace("\\", "/") for path in env["CPPPATH"]]
incPathsFile = env.Command("build/__cpp_path.txt",
    [],
    echo_response_file(cppPathStr)
)

defines = ['-DTEST1', '-DTEST2']
defineOptsFile = env.Command("build/__define_options.txt", 
    [],
    echo_response_file(defines)
)

objsList = []
for obj in objs:
    (fileName, ext) = os.path.splitext(obj.path)
    if ext in env["CPPSUFFIXES"] or ext == ".o":
        objsList += [fileName.replace("\\", "/") + ".o"];
objsList = sorted(objsList)
linkObjsFile = env.Command(
    "build/__link_objects.txt",
    [],
    echo_response_file(objsList)
)

def _add_scanner(builder):
    def new_scanner(node, env, path):
        return incPathsFile + defineOptsFile + linkObjsFile
       
    builder.builder.target_scanner = SCons.Scanner.Scanner(
        function=new_scanner,
        path_function=[],
    )
for object_builder in SCons.Tool.createObjBuilders(env):
    _add_scanner(object_builder)

env["_CPPINCFLAGS"] = "@%s @%s" % (incPathsFile[0].path, defineOptsFile[0].path)
env["LINKCOM"] = "$LINK -o $TARGET $LINKFLAGS $__RPATH $_LIBDIRFLAGS $_LIBFLAGS @%s" % (linkObjsFile[0].path.replace("\\", "/"))

# make a building
DoBuilding(TARGET, objs)
